/*-----------------------------------------------------------------------------
 * File: option.cpp
 *-----------------------------------------------------------------------------
 * Copyright (c) 2004-2005  Kazuo Ishii <k-ishii@wb4.so-net.ne.jp>
 *				- original version
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *---------------------------------------------------------------------------*/
#include "option.h"
#include "version.h"
#include <shlwapi.h>
#include <stdio.h>

static bool lookupColor(const wchar_t *str, COLORREF& ret)
{
	typedef struct {
		COLORREF	color;
		const wchar_t	*name;
	} COLOR;
	static const COLOR colors[] = {
		{ RGB(0xF0,0xF8,0xFF), L"alice blue" },
		{ RGB(0xF0,0xF8,0xFF), L"AliceBlue" },
		{ RGB(0xFA,0xEB,0xD7), L"antique white" },
		{ RGB(0xFA,0xEB,0xD7), L"AntiqueWhite" },
		{ RGB(0xFF,0xEF,0xDB), L"AntiqueWhite1" },
		{ RGB(0xEE,0xDF,0xCC), L"AntiqueWhite2" },
		{ RGB(0xCD,0xC0,0xB0), L"AntiqueWhite3" },
		{ RGB(0x8B,0x83,0x78), L"AntiqueWhite4" },
		{ RGB(0x7F,0xFF,0xD4), L"aquamarine" },
		{ RGB(0x7F,0xFF,0xD4), L"aquamarine1" },
		{ RGB(0x76,0xEE,0xC6), L"aquamarine2" },
		{ RGB(0x66,0xCD,0xAA), L"aquamarine3" },
		{ RGB(0x45,0x8B,0x74), L"aquamarine4" },
		{ RGB(0xF0,0xFF,0xFF), L"azure" },
		{ RGB(0xF0,0xFF,0xFF), L"azure1" },
		{ RGB(0xE0,0xEE,0xEE), L"azure2" },
		{ RGB(0xC1,0xCD,0xCD), L"azure3" },
		{ RGB(0x83,0x8B,0x8B), L"azure4" },
		{ RGB(0xF5,0xF5,0xDC), L"beige" },
		{ RGB(0xFF,0xE4,0xC4), L"bisque" },
		{ RGB(0xFF,0xE4,0xC4), L"bisque1" },
		{ RGB(0xEE,0xD5,0xB7), L"bisque2" },
		{ RGB(0xCD,0xB7,0x9E), L"bisque3" },
		{ RGB(0x8B,0x7D,0x6B), L"bisque4" },
		{ RGB(0x00,0x00,0x01), L"black" },
		{ RGB(0xFF,0xEB,0xCD), L"blanched almond" },
		{ RGB(0xFF,0xEB,0xCD), L"BlanchedAlmond" },
		{ RGB(0x00,0x00,0xFF), L"blue" },
		{ RGB(0x8A,0x2B,0xE2), L"blue violet" },
		{ RGB(0x00,0x00,0xFF), L"blue1" },
		{ RGB(0x00,0x00,0xEE), L"blue2" },
		{ RGB(0x00,0x00,0xCD), L"blue3" },
		{ RGB(0x00,0x00,0x8B), L"blue4" },
		{ RGB(0x8A,0x2B,0xE2), L"BlueViolet" },
		{ RGB(0xA5,0x2A,0x2A), L"brown" },
		{ RGB(0xFF,0x40,0x40), L"brown1" },
		{ RGB(0xEE,0x3B,0x3B), L"brown2" },
		{ RGB(0xCD,0x33,0x33), L"brown3" },
		{ RGB(0x8B,0x23,0x23), L"brown4" },
		{ RGB(0xDE,0xB8,0x87), L"burlywood" },
		{ RGB(0xFF,0xD3,0x9B), L"burlywood1" },
		{ RGB(0xEE,0xC5,0x91), L"burlywood2" },
		{ RGB(0xCD,0xAA,0x7D), L"burlywood3" },
		{ RGB(0x8B,0x73,0x55), L"burlywood4" },
		{ RGB(0x5F,0x9E,0xA0), L"cadet blue" },
		{ RGB(0x5F,0x9E,0xA0), L"CadetBlue" },
		{ RGB(0x98,0xF5,0xFF), L"CadetBlue1" },
		{ RGB(0x8E,0xE5,0xEE), L"CadetBlue2" },
		{ RGB(0x7A,0xC5,0xCD), L"CadetBlue3" },
		{ RGB(0x53,0x86,0x8B), L"CadetBlue4" },
		{ RGB(0x7F,0xFF,0x00), L"chartreuse" },
		{ RGB(0x7F,0xFF,0x00), L"chartreuse1" },
		{ RGB(0x76,0xEE,0x00), L"chartreuse2" },
		{ RGB(0x66,0xCD,0x00), L"chartreuse3" },
		{ RGB(0x45,0x8B,0x00), L"chartreuse4" },
		{ RGB(0xD2,0x69,0x1E), L"chocolate" },
		{ RGB(0xFF,0x7F,0x24), L"chocolate1" },
		{ RGB(0xEE,0x76,0x21), L"chocolate2" },
		{ RGB(0xCD,0x66,0x1D), L"chocolate3" },
		{ RGB(0x8B,0x45,0x13), L"chocolate4" },
		{ RGB(0xFF,0x7F,0x50), L"coral" },
		{ RGB(0xFF,0x72,0x56), L"coral1" },
		{ RGB(0xEE,0x6A,0x50), L"coral2" },
		{ RGB(0xCD,0x5B,0x45), L"coral3" },
		{ RGB(0x8B,0x3E,0x2F), L"coral4" },
		{ RGB(0x64,0x95,0xED), L"cornflower blue" },
		{ RGB(0x64,0x95,0xED), L"CornflowerBlue" },
		{ RGB(0xFF,0xF8,0xDC), L"cornsilk" },
		{ RGB(0xFF,0xF8,0xDC), L"cornsilk1" },
		{ RGB(0xEE,0xE8,0xCD), L"cornsilk2" },
		{ RGB(0xCD,0xC8,0xB1), L"cornsilk3" },
		{ RGB(0x8B,0x88,0x78), L"cornsilk4" },
		{ RGB(0x00,0xFF,0xFF), L"cyan" },
		{ RGB(0x00,0xFF,0xFF), L"cyan1" },
		{ RGB(0x00,0xEE,0xEE), L"cyan2" },
		{ RGB(0x00,0xCD,0xCD), L"cyan3" },
		{ RGB(0x00,0x8B,0x8B), L"cyan4" },
		{ RGB(0xB8,0x86,0x0B), L"dark goldenrod" },
		{ RGB(0x00,0x64,0x00), L"dark green" },
		{ RGB(0xBD,0xB7,0x6B), L"dark khaki" },
		{ RGB(0x55,0x6B,0x2F), L"dark olive green" },
		{ RGB(0xFF,0x8C,0x00), L"dark orange" },
		{ RGB(0x99,0x32,0xCC), L"dark orchid" },
		{ RGB(0xE9,0x96,0x7A), L"dark salmon" },
		{ RGB(0x8F,0xBC,0x8F), L"dark sea green" },
		{ RGB(0x48,0x3D,0x8B), L"dark slate blue" },
		{ RGB(0x2F,0x4F,0x4F), L"dark slate gray" },
		{ RGB(0x2F,0x4F,0x4F), L"dark slate grey" },
		{ RGB(0x00,0xCE,0xD1), L"dark turquoise" },
		{ RGB(0x94,0x00,0xD3), L"dark violet" },
		{ RGB(0xB8,0x86,0x0B), L"DarkGoldenrod" },
		{ RGB(0xFF,0xB9,0x0F), L"DarkGoldenrod1" },
		{ RGB(0xEE,0xAD,0x0E), L"DarkGoldenrod2" },
		{ RGB(0xCD,0x95,0x0C), L"DarkGoldenrod3" },
		{ RGB(0x8B,0x65,0x08), L"DarkGoldenrod4" },
		{ RGB(0x00,0x64,0x00), L"DarkGreen" },
		{ RGB(0xBD,0xB7,0x6B), L"DarkKhaki" },
		{ RGB(0x55,0x6B,0x2F), L"DarkOliveGreen" },
		{ RGB(0xCA,0xFF,0x70), L"DarkOliveGreen1" },
		{ RGB(0xBC,0xEE,0x68), L"DarkOliveGreen2" },
		{ RGB(0xA2,0xCD,0x5A), L"DarkOliveGreen3" },
		{ RGB(0x6E,0x8B,0x3D), L"DarkOliveGreen4" },
		{ RGB(0xFF,0x8C,0x00), L"DarkOrange" },
		{ RGB(0xFF,0x7F,0x00), L"DarkOrange1" },
		{ RGB(0xEE,0x76,0x00), L"DarkOrange2" },
		{ RGB(0xCD,0x66,0x00), L"DarkOrange3" },
		{ RGB(0x8B,0x45,0x00), L"DarkOrange4" },
		{ RGB(0x99,0x32,0xCC), L"DarkOrchid" },
		{ RGB(0xBF,0x3E,0xFF), L"DarkOrchid1" },
		{ RGB(0xB2,0x3A,0xEE), L"DarkOrchid2" },
		{ RGB(0x9A,0x32,0xCD), L"DarkOrchid3" },
		{ RGB(0x68,0x22,0x8B), L"DarkOrchid4" },
		{ RGB(0xE9,0x96,0x7A), L"DarkSalmon" },
		{ RGB(0x8F,0xBC,0x8F), L"DarkSeaGreen" },
		{ RGB(0xC1,0xFF,0xC1), L"DarkSeaGreen1" },
		{ RGB(0xB4,0xEE,0xB4), L"DarkSeaGreen2" },
		{ RGB(0x9B,0xCD,0x9B), L"DarkSeaGreen3" },
		{ RGB(0x69,0x8B,0x69), L"DarkSeaGreen4" },
		{ RGB(0x48,0x3D,0x8B), L"DarkSlateBlue" },
		{ RGB(0x2F,0x4F,0x4F), L"DarkSlateGray" },
		{ RGB(0x97,0xFF,0xFF), L"DarkSlateGray1" },
		{ RGB(0x8D,0xEE,0xEE), L"DarkSlateGray2" },
		{ RGB(0x79,0xCD,0xCD), L"DarkSlateGray3" },
		{ RGB(0x52,0x8B,0x8B), L"DarkSlateGray4" },
		{ RGB(0x2F,0x4F,0x4F), L"DarkSlateGrey" },
		{ RGB(0x00,0xCE,0xD1), L"DarkTurquoise" },
		{ RGB(0x94,0x00,0xD3), L"DarkViolet" },
		{ RGB(0xFF,0x14,0x93), L"deep pink" },
		{ RGB(0x00,0xBF,0xFF), L"deep sky blue" },
		{ RGB(0xFF,0x14,0x93), L"DeepPink" },
		{ RGB(0xFF,0x14,0x93), L"DeepPink1" },
		{ RGB(0xEE,0x12,0x89), L"DeepPink2" },
		{ RGB(0xCD,0x10,0x76), L"DeepPink3" },
		{ RGB(0x8B,0x0A,0x50), L"DeepPink4" },
		{ RGB(0x00,0xBF,0xFF), L"DeepSkyBlue" },
		{ RGB(0x00,0xBF,0xFF), L"DeepSkyBlue1" },
		{ RGB(0x00,0xB2,0xEE), L"DeepSkyBlue2" },
		{ RGB(0x00,0x9A,0xCD), L"DeepSkyBlue3" },
		{ RGB(0x00,0x68,0x8B), L"DeepSkyBlue4" },
		{ RGB(0x69,0x69,0x69), L"dim gray" },
		{ RGB(0x69,0x69,0x69), L"dim grey" },
		{ RGB(0x69,0x69,0x69), L"DimGray" },
		{ RGB(0x69,0x69,0x69), L"DimGrey" },
		{ RGB(0x1E,0x90,0xFF), L"dodger blue" },
		{ RGB(0x1E,0x90,0xFF), L"DodgerBlue" },
		{ RGB(0x1E,0x90,0xFF), L"DodgerBlue1" },
		{ RGB(0x1C,0x86,0xEE), L"DodgerBlue2" },
		{ RGB(0x18,0x74,0xCD), L"DodgerBlue3" },
		{ RGB(0x10,0x4E,0x8B), L"DodgerBlue4" },
		{ RGB(0xB2,0x22,0x22), L"firebrick" },
		{ RGB(0xFF,0x30,0x30), L"firebrick1" },
		{ RGB(0xEE,0x2C,0x2C), L"firebrick2" },
		{ RGB(0xCD,0x26,0x26), L"firebrick3" },
		{ RGB(0x8B,0x1A,0x1A), L"firebrick4" },
		{ RGB(0xFF,0xFA,0xF0), L"floral white" },
		{ RGB(0xFF,0xFA,0xF0), L"FloralWhite" },
		{ RGB(0x22,0x8B,0x22), L"forest green" },
		{ RGB(0x22,0x8B,0x22), L"ForestGreen" },
		{ RGB(0xDC,0xDC,0xDC), L"gainsboro" },
		{ RGB(0xF8,0xF8,0xFF), L"ghost white" },
		{ RGB(0xF8,0xF8,0xFF), L"GhostWhite" },
		{ RGB(0xFF,0xD7,0x00), L"gold" },
		{ RGB(0xFF,0xD7,0x00), L"gold1" },
		{ RGB(0xEE,0xC9,0x00), L"gold2" },
		{ RGB(0xCD,0xAD,0x00), L"gold3" },
		{ RGB(0x8B,0x75,0x00), L"gold4" },
		{ RGB(0xDA,0xA5,0x20), L"goldenrod" },
		{ RGB(0xFF,0xC1,0x25), L"goldenrod1" },
		{ RGB(0xEE,0xB4,0x22), L"goldenrod2" },
		{ RGB(0xCD,0x9B,0x1D), L"goldenrod3" },
		{ RGB(0x8B,0x69,0x14), L"goldenrod4" },
		{ RGB(0xBE,0xBE,0xBE), L"gray" },
		{ RGB(0x00,0x00,0x01), L"gray0" },
		{ RGB(0x03,0x03,0x03), L"gray1" },
		{ RGB(0x1A,0x1A,0x1A), L"gray10" },
		{ RGB(0xFF,0xFF,0xFF), L"gray100" },
		{ RGB(0x1C,0x1C,0x1C), L"gray11" },
		{ RGB(0x1F,0x1F,0x1F), L"gray12" },
		{ RGB(0x21,0x21,0x21), L"gray13" },
		{ RGB(0x24,0x24,0x24), L"gray14" },
		{ RGB(0x26,0x26,0x26), L"gray15" },
		{ RGB(0x29,0x29,0x29), L"gray16" },
		{ RGB(0x2B,0x2B,0x2B), L"gray17" },
		{ RGB(0x2E,0x2E,0x2E), L"gray18" },
		{ RGB(0x30,0x30,0x30), L"gray19" },
		{ RGB(0x05,0x05,0x05), L"gray2" },
		{ RGB(0x33,0x33,0x33), L"gray20" },
		{ RGB(0x36,0x36,0x36), L"gray21" },
		{ RGB(0x38,0x38,0x38), L"gray22" },
		{ RGB(0x3B,0x3B,0x3B), L"gray23" },
		{ RGB(0x3D,0x3D,0x3D), L"gray24" },
		{ RGB(0x40,0x40,0x40), L"gray25" },
		{ RGB(0x42,0x42,0x42), L"gray26" },
		{ RGB(0x45,0x45,0x45), L"gray27" },
		{ RGB(0x47,0x47,0x47), L"gray28" },
		{ RGB(0x4A,0x4A,0x4A), L"gray29" },
		{ RGB(0x08,0x08,0x08), L"gray3" },
		{ RGB(0x4D,0x4D,0x4D), L"gray30" },
		{ RGB(0x4F,0x4F,0x4F), L"gray31" },
		{ RGB(0x52,0x52,0x52), L"gray32" },
		{ RGB(0x54,0x54,0x54), L"gray33" },
		{ RGB(0x57,0x57,0x57), L"gray34" },
		{ RGB(0x59,0x59,0x59), L"gray35" },
		{ RGB(0x5C,0x5C,0x5C), L"gray36" },
		{ RGB(0x5E,0x5E,0x5E), L"gray37" },
		{ RGB(0x61,0x61,0x61), L"gray38" },
		{ RGB(0x63,0x63,0x63), L"gray39" },
		{ RGB(0x0A,0x0A,0x0A), L"gray4" },
		{ RGB(0x66,0x66,0x66), L"gray40" },
		{ RGB(0x69,0x69,0x69), L"gray41" },
		{ RGB(0x6B,0x6B,0x6B), L"gray42" },
		{ RGB(0x6E,0x6E,0x6E), L"gray43" },
		{ RGB(0x70,0x70,0x70), L"gray44" },
		{ RGB(0x73,0x73,0x73), L"gray45" },
		{ RGB(0x75,0x75,0x75), L"gray46" },
		{ RGB(0x78,0x78,0x78), L"gray47" },
		{ RGB(0x7A,0x7A,0x7A), L"gray48" },
		{ RGB(0x7D,0x7D,0x7D), L"gray49" },
		{ RGB(0x0D,0x0D,0x0D), L"gray5" },
		{ RGB(0x7F,0x7F,0x7F), L"gray50" },
		{ RGB(0x82,0x82,0x82), L"gray51" },
		{ RGB(0x85,0x85,0x85), L"gray52" },
		{ RGB(0x87,0x87,0x87), L"gray53" },
		{ RGB(0x8A,0x8A,0x8A), L"gray54" },
		{ RGB(0x8C,0x8C,0x8C), L"gray55" },
		{ RGB(0x8F,0x8F,0x8F), L"gray56" },
		{ RGB(0x91,0x91,0x91), L"gray57" },
		{ RGB(0x94,0x94,0x94), L"gray58" },
		{ RGB(0x96,0x96,0x96), L"gray59" },
		{ RGB(0x0F,0x0F,0x0F), L"gray6" },
		{ RGB(0x99,0x99,0x99), L"gray60" },
		{ RGB(0x9C,0x9C,0x9C), L"gray61" },
		{ RGB(0x9E,0x9E,0x9E), L"gray62" },
		{ RGB(0xA1,0xA1,0xA1), L"gray63" },
		{ RGB(0xA3,0xA3,0xA3), L"gray64" },
		{ RGB(0xA6,0xA6,0xA6), L"gray65" },
		{ RGB(0xA8,0xA8,0xA8), L"gray66" },
		{ RGB(0xAB,0xAB,0xAB), L"gray67" },
		{ RGB(0xAD,0xAD,0xAD), L"gray68" },
		{ RGB(0xB0,0xB0,0xB0), L"gray69" },
		{ RGB(0x12,0x12,0x12), L"gray7" },
		{ RGB(0xB3,0xB3,0xB3), L"gray70" },
		{ RGB(0xB5,0xB5,0xB5), L"gray71" },
		{ RGB(0xB8,0xB8,0xB8), L"gray72" },
		{ RGB(0xBA,0xBA,0xBA), L"gray73" },
		{ RGB(0xBD,0xBD,0xBD), L"gray74" },
		{ RGB(0xBF,0xBF,0xBF), L"gray75" },
		{ RGB(0xC2,0xC2,0xC2), L"gray76" },
		{ RGB(0xC4,0xC4,0xC4), L"gray77" },
		{ RGB(0xC7,0xC7,0xC7), L"gray78" },
		{ RGB(0xC9,0xC9,0xC9), L"gray79" },
		{ RGB(0x14,0x14,0x14), L"gray8" },
		{ RGB(0xCC,0xCC,0xCC), L"gray80" },
		{ RGB(0xCF,0xCF,0xCF), L"gray81" },
		{ RGB(0xD1,0xD1,0xD1), L"gray82" },
		{ RGB(0xD4,0xD4,0xD4), L"gray83" },
		{ RGB(0xD6,0xD6,0xD6), L"gray84" },
		{ RGB(0xD9,0xD9,0xD9), L"gray85" },
		{ RGB(0xDB,0xDB,0xDB), L"gray86" },
		{ RGB(0xDE,0xDE,0xDE), L"gray87" },
		{ RGB(0xE0,0xE0,0xE0), L"gray88" },
		{ RGB(0xE3,0xE3,0xE3), L"gray89" },
		{ RGB(0x17,0x17,0x17), L"gray9" },
		{ RGB(0xE5,0xE5,0xE5), L"gray90" },
		{ RGB(0xE8,0xE8,0xE8), L"gray91" },
		{ RGB(0xEB,0xEB,0xEB), L"gray92" },
		{ RGB(0xED,0xED,0xED), L"gray93" },
		{ RGB(0xF0,0xF0,0xF0), L"gray94" },
		{ RGB(0xF2,0xF2,0xF2), L"gray95" },
		{ RGB(0xF5,0xF5,0xF5), L"gray96" },
		{ RGB(0xF7,0xF7,0xF7), L"gray97" },
		{ RGB(0xFA,0xFA,0xFA), L"gray98" },
		{ RGB(0xFC,0xFC,0xFC), L"gray99" },
		{ RGB(0x00,0xFF,0x00), L"green" },
		{ RGB(0xAD,0xFF,0x2F), L"green yellow" },
		{ RGB(0x00,0xFF,0x00), L"green1" },
		{ RGB(0x00,0xEE,0x00), L"green2" },
		{ RGB(0x00,0xCD,0x00), L"green3" },
		{ RGB(0x00,0x8B,0x00), L"green4" },
		{ RGB(0xAD,0xFF,0x2F), L"GreenYellow" },
		{ RGB(0xBE,0xBE,0xBE), L"grey" },
		{ RGB(0x00,0x00,0x01), L"grey0" },
		{ RGB(0x03,0x03,0x03), L"grey1" },
		{ RGB(0x1A,0x1A,0x1A), L"grey10" },
		{ RGB(0xFF,0xFF,0xFF), L"grey100" },
		{ RGB(0x1C,0x1C,0x1C), L"grey11" },
		{ RGB(0x1F,0x1F,0x1F), L"grey12" },
		{ RGB(0x21,0x21,0x21), L"grey13" },
		{ RGB(0x24,0x24,0x24), L"grey14" },
		{ RGB(0x26,0x26,0x26), L"grey15" },
		{ RGB(0x29,0x29,0x29), L"grey16" },
		{ RGB(0x2B,0x2B,0x2B), L"grey17" },
		{ RGB(0x2E,0x2E,0x2E), L"grey18" },
		{ RGB(0x30,0x30,0x30), L"grey19" },
		{ RGB(0x05,0x05,0x05), L"grey2" },
		{ RGB(0x33,0x33,0x33), L"grey20" },
		{ RGB(0x36,0x36,0x36), L"grey21" },
		{ RGB(0x38,0x38,0x38), L"grey22" },
		{ RGB(0x3B,0x3B,0x3B), L"grey23" },
		{ RGB(0x3D,0x3D,0x3D), L"grey24" },
		{ RGB(0x40,0x40,0x40), L"grey25" },
		{ RGB(0x42,0x42,0x42), L"grey26" },
		{ RGB(0x45,0x45,0x45), L"grey27" },
		{ RGB(0x47,0x47,0x47), L"grey28" },
		{ RGB(0x4A,0x4A,0x4A), L"grey29" },
		{ RGB(0x08,0x08,0x08), L"grey3" },
		{ RGB(0x4D,0x4D,0x4D), L"grey30" },
		{ RGB(0x4F,0x4F,0x4F), L"grey31" },
		{ RGB(0x52,0x52,0x52), L"grey32" },
		{ RGB(0x54,0x54,0x54), L"grey33" },
		{ RGB(0x57,0x57,0x57), L"grey34" },
		{ RGB(0x59,0x59,0x59), L"grey35" },
		{ RGB(0x5C,0x5C,0x5C), L"grey36" },
		{ RGB(0x5E,0x5E,0x5E), L"grey37" },
		{ RGB(0x61,0x61,0x61), L"grey38" },
		{ RGB(0x63,0x63,0x63), L"grey39" },
		{ RGB(0x0A,0x0A,0x0A), L"grey4" },
		{ RGB(0x66,0x66,0x66), L"grey40" },
		{ RGB(0x69,0x69,0x69), L"grey41" },
		{ RGB(0x6B,0x6B,0x6B), L"grey42" },
		{ RGB(0x6E,0x6E,0x6E), L"grey43" },
		{ RGB(0x70,0x70,0x70), L"grey44" },
		{ RGB(0x73,0x73,0x73), L"grey45" },
		{ RGB(0x75,0x75,0x75), L"grey46" },
		{ RGB(0x78,0x78,0x78), L"grey47" },
		{ RGB(0x7A,0x7A,0x7A), L"grey48" },
		{ RGB(0x7D,0x7D,0x7D), L"grey49" },
		{ RGB(0x0D,0x0D,0x0D), L"grey5" },
		{ RGB(0x7F,0x7F,0x7F), L"grey50" },
		{ RGB(0x82,0x82,0x82), L"grey51" },
		{ RGB(0x85,0x85,0x85), L"grey52" },
		{ RGB(0x87,0x87,0x87), L"grey53" },
		{ RGB(0x8A,0x8A,0x8A), L"grey54" },
		{ RGB(0x8C,0x8C,0x8C), L"grey55" },
		{ RGB(0x8F,0x8F,0x8F), L"grey56" },
		{ RGB(0x91,0x91,0x91), L"grey57" },
		{ RGB(0x94,0x94,0x94), L"grey58" },
		{ RGB(0x96,0x96,0x96), L"grey59" },
		{ RGB(0x0F,0x0F,0x0F), L"grey6" },
		{ RGB(0x99,0x99,0x99), L"grey60" },
		{ RGB(0x9C,0x9C,0x9C), L"grey61" },
		{ RGB(0x9E,0x9E,0x9E), L"grey62" },
		{ RGB(0xA1,0xA1,0xA1), L"grey63" },
		{ RGB(0xA3,0xA3,0xA3), L"grey64" },
		{ RGB(0xA6,0xA6,0xA6), L"grey65" },
		{ RGB(0xA8,0xA8,0xA8), L"grey66" },
		{ RGB(0xAB,0xAB,0xAB), L"grey67" },
		{ RGB(0xAD,0xAD,0xAD), L"grey68" },
		{ RGB(0xB0,0xB0,0xB0), L"grey69" },
		{ RGB(0x12,0x12,0x12), L"grey7" },
		{ RGB(0xB3,0xB3,0xB3), L"grey70" },
		{ RGB(0xB5,0xB5,0xB5), L"grey71" },
		{ RGB(0xB8,0xB8,0xB8), L"grey72" },
		{ RGB(0xBA,0xBA,0xBA), L"grey73" },
		{ RGB(0xBD,0xBD,0xBD), L"grey74" },
		{ RGB(0xBF,0xBF,0xBF), L"grey75" },
		{ RGB(0xC2,0xC2,0xC2), L"grey76" },
		{ RGB(0xC4,0xC4,0xC4), L"grey77" },
		{ RGB(0xC7,0xC7,0xC7), L"grey78" },
		{ RGB(0xC9,0xC9,0xC9), L"grey79" },
		{ RGB(0x14,0x14,0x14), L"grey8" },
		{ RGB(0xCC,0xCC,0xCC), L"grey80" },
		{ RGB(0xCF,0xCF,0xCF), L"grey81" },
		{ RGB(0xD1,0xD1,0xD1), L"grey82" },
		{ RGB(0xD4,0xD4,0xD4), L"grey83" },
		{ RGB(0xD6,0xD6,0xD6), L"grey84" },
		{ RGB(0xD9,0xD9,0xD9), L"grey85" },
		{ RGB(0xDB,0xDB,0xDB), L"grey86" },
		{ RGB(0xDE,0xDE,0xDE), L"grey87" },
		{ RGB(0xE0,0xE0,0xE0), L"grey88" },
		{ RGB(0xE3,0xE3,0xE3), L"grey89" },
		{ RGB(0x17,0x17,0x17), L"grey9" },
		{ RGB(0xE5,0xE5,0xE5), L"grey90" },
		{ RGB(0xE8,0xE8,0xE8), L"grey91" },
		{ RGB(0xEB,0xEB,0xEB), L"grey92" },
		{ RGB(0xED,0xED,0xED), L"grey93" },
		{ RGB(0xF0,0xF0,0xF0), L"grey94" },
		{ RGB(0xF2,0xF2,0xF2), L"grey95" },
		{ RGB(0xF5,0xF5,0xF5), L"grey96" },
		{ RGB(0xF7,0xF7,0xF7), L"grey97" },
		{ RGB(0xFA,0xFA,0xFA), L"grey98" },
		{ RGB(0xFC,0xFC,0xFC), L"grey99" },
		{ RGB(0xF0,0xFF,0xF0), L"honeydew" },
		{ RGB(0xF0,0xFF,0xF0), L"honeydew1" },
		{ RGB(0xE0,0xEE,0xE0), L"honeydew2" },
		{ RGB(0xC1,0xCD,0xC1), L"honeydew3" },
		{ RGB(0x83,0x8B,0x83), L"honeydew4" },
		{ RGB(0xFF,0x69,0xB4), L"hot pink" },
		{ RGB(0xFF,0x69,0xB4), L"HotPink" },
		{ RGB(0xFF,0x6E,0xB4), L"HotPink1" },
		{ RGB(0xEE,0x6A,0xA7), L"HotPink2" },
		{ RGB(0xCD,0x60,0x90), L"HotPink3" },
		{ RGB(0x8B,0x3A,0x62), L"HotPink4" },
		{ RGB(0xCD,0x5C,0x5C), L"indian red" },
		{ RGB(0xCD,0x5C,0x5C), L"IndianRed" },
		{ RGB(0xFF,0x6A,0x6A), L"IndianRed1" },
		{ RGB(0xEE,0x63,0x63), L"IndianRed2" },
		{ RGB(0xCD,0x55,0x55), L"IndianRed3" },
		{ RGB(0x8B,0x3A,0x3A), L"IndianRed4" },
		{ RGB(0xFF,0xFF,0xF0), L"ivory" },
		{ RGB(0xFF,0xFF,0xF0), L"ivory1" },
		{ RGB(0xEE,0xEE,0xE0), L"ivory2" },
		{ RGB(0xCD,0xCD,0xC1), L"ivory3" },
		{ RGB(0x8B,0x8B,0x83), L"ivory4" },
		{ RGB(0xF0,0xE6,0x8C), L"khaki" },
		{ RGB(0xFF,0xF6,0x8F), L"khaki1" },
		{ RGB(0xEE,0xE6,0x85), L"khaki2" },
		{ RGB(0xCD,0xC6,0x73), L"khaki3" },
		{ RGB(0x8B,0x86,0x4E), L"khaki4" },
		{ RGB(0xE6,0xE6,0xFA), L"lavender" },
		{ RGB(0xFF,0xF0,0xF5), L"lavender blush" },
		{ RGB(0xFF,0xF0,0xF5), L"LavenderBlush" },
		{ RGB(0xFF,0xF0,0xF5), L"LavenderBlush1" },
		{ RGB(0xEE,0xE0,0xE5), L"LavenderBlush2" },
		{ RGB(0xCD,0xC1,0xC5), L"LavenderBlush3" },
		{ RGB(0x8B,0x83,0x86), L"LavenderBlush4" },
		{ RGB(0x7C,0xFC,0x00), L"lawn green" },
		{ RGB(0x7C,0xFC,0x00), L"LawnGreen" },
		{ RGB(0xFF,0xFA,0xCD), L"lemon chiffon" },
		{ RGB(0xFF,0xFA,0xCD), L"LemonChiffon" },
		{ RGB(0xFF,0xFA,0xCD), L"LemonChiffon1" },
		{ RGB(0xEE,0xE9,0xBF), L"LemonChiffon2" },
		{ RGB(0xCD,0xC9,0xA5), L"LemonChiffon3" },
		{ RGB(0x8B,0x89,0x70), L"LemonChiffon4" },
		{ RGB(0xAD,0xD8,0xE6), L"light blue" },
		{ RGB(0xF0,0x80,0x80), L"light coral" },
		{ RGB(0xE0,0xFF,0xFF), L"light cyan" },
		{ RGB(0xEE,0xDD,0x82), L"light goldenrod" },
		{ RGB(0xFA,0xFA,0xD2), L"light goldenrod yellow" },
		{ RGB(0xD3,0xD3,0xD3), L"light gray" },
		{ RGB(0xD3,0xD3,0xD3), L"light grey" },
		{ RGB(0xFF,0xB6,0xC1), L"light pink" },
		{ RGB(0xFF,0xA0,0x7A), L"light salmon" },
		{ RGB(0x20,0xB2,0xAA), L"light sea green" },
		{ RGB(0x87,0xCE,0xFA), L"light sky blue" },
		{ RGB(0x84,0x70,0xFF), L"light slate blue" },
		{ RGB(0x77,0x88,0x99), L"light slate gray" },
		{ RGB(0x77,0x88,0x99), L"light slate grey" },
		{ RGB(0xB0,0xC4,0xDE), L"light steel blue" },
		{ RGB(0xFF,0xFF,0xE0), L"light yellow" },
		{ RGB(0xAD,0xD8,0xE6), L"LightBlue" },
		{ RGB(0xBF,0xEF,0xFF), L"LightBlue1" },
		{ RGB(0xB2,0xDF,0xEE), L"LightBlue2" },
		{ RGB(0x9A,0xC0,0xCD), L"LightBlue3" },
		{ RGB(0x68,0x83,0x8B), L"LightBlue4" },
		{ RGB(0xF0,0x80,0x80), L"LightCoral" },
		{ RGB(0xE0,0xFF,0xFF), L"LightCyan" },
		{ RGB(0xE0,0xFF,0xFF), L"LightCyan1" },
		{ RGB(0xD1,0xEE,0xEE), L"LightCyan2" },
		{ RGB(0xB4,0xCD,0xCD), L"LightCyan3" },
		{ RGB(0x7A,0x8B,0x8B), L"LightCyan4" },
		{ RGB(0xEE,0xDD,0x82), L"LightGoldenrod" },
		{ RGB(0xFF,0xEC,0x8B), L"LightGoldenrod1" },
		{ RGB(0xEE,0xDC,0x82), L"LightGoldenrod2" },
		{ RGB(0xCD,0xBE,0x70), L"LightGoldenrod3" },
		{ RGB(0x8B,0x81,0x4C), L"LightGoldenrod4" },
		{ RGB(0xFA,0xFA,0xD2), L"LightGoldenrodYellow" },
		{ RGB(0xD3,0xD3,0xD3), L"LightGray" },
		{ RGB(0xD3,0xD3,0xD3), L"LightGrey" },
		{ RGB(0xFF,0xB6,0xC1), L"LightPink" },
		{ RGB(0xFF,0xAE,0xB9), L"LightPink1" },
		{ RGB(0xEE,0xA2,0xAD), L"LightPink2" },
		{ RGB(0xCD,0x8C,0x95), L"LightPink3" },
		{ RGB(0x8B,0x5F,0x65), L"LightPink4" },
		{ RGB(0xFF,0xA0,0x7A), L"LightSalmon" },
		{ RGB(0xFF,0xA0,0x7A), L"LightSalmon1" },
		{ RGB(0xEE,0x95,0x72), L"LightSalmon2" },
		{ RGB(0xCD,0x81,0x62), L"LightSalmon3" },
		{ RGB(0x8B,0x57,0x42), L"LightSalmon4" },
		{ RGB(0x20,0xB2,0xAA), L"LightSeaGreen" },
		{ RGB(0x87,0xCE,0xFA), L"LightSkyBlue" },
		{ RGB(0xB0,0xE2,0xFF), L"LightSkyBlue1" },
		{ RGB(0xA4,0xD3,0xEE), L"LightSkyBlue2" },
		{ RGB(0x8D,0xB6,0xCD), L"LightSkyBlue3" },
		{ RGB(0x60,0x7B,0x8B), L"LightSkyBlue4" },
		{ RGB(0x84,0x70,0xFF), L"LightSlateBlue" },
		{ RGB(0x77,0x88,0x99), L"LightSlateGray" },
		{ RGB(0x77,0x88,0x99), L"LightSlateGrey" },
		{ RGB(0xB0,0xC4,0xDE), L"LightSteelBlue" },
		{ RGB(0xCA,0xE1,0xFF), L"LightSteelBlue1" },
		{ RGB(0xBC,0xD2,0xEE), L"LightSteelBlue2" },
		{ RGB(0xA2,0xB5,0xCD), L"LightSteelBlue3" },
		{ RGB(0x6E,0x7B,0x8B), L"LightSteelBlue4" },
		{ RGB(0xFF,0xFF,0xE0), L"LightYellow" },
		{ RGB(0xFF,0xFF,0xE0), L"LightYellow1" },
		{ RGB(0xEE,0xEE,0xD1), L"LightYellow2" },
		{ RGB(0xCD,0xCD,0xB4), L"LightYellow3" },
		{ RGB(0x8B,0x8B,0x7A), L"LightYellow4" },
		{ RGB(0x32,0xCD,0x32), L"lime green" },
		{ RGB(0x32,0xCD,0x32), L"LimeGreen" },
		{ RGB(0xFA,0xF0,0xE6), L"linen" },
		{ RGB(0xFF,0x00,0xFF), L"magenta" },
		{ RGB(0xFF,0x00,0xFF), L"magenta1" },
		{ RGB(0xEE,0x00,0xEE), L"magenta2" },
		{ RGB(0xCD,0x00,0xCD), L"magenta3" },
		{ RGB(0x8B,0x00,0x8B), L"magenta4" },
		{ RGB(0xB0,0x30,0x60), L"maroon" },
		{ RGB(0xFF,0x34,0xB3), L"maroon1" },
		{ RGB(0xEE,0x30,0xA7), L"maroon2" },
		{ RGB(0xCD,0x29,0x90), L"maroon3" },
		{ RGB(0x8B,0x1C,0x62), L"maroon4" },
		{ RGB(0x66,0xCD,0xAA), L"medium aquamarine" },
		{ RGB(0x00,0x00,0xCD), L"medium blue" },
		{ RGB(0xBA,0x55,0xD3), L"medium orchid" },
		{ RGB(0x93,0x70,0xDB), L"medium purple" },
		{ RGB(0x3C,0xB3,0x71), L"medium sea green" },
		{ RGB(0x7B,0x68,0xEE), L"medium slate blue" },
		{ RGB(0x00,0xFA,0x9A), L"medium spring green" },
		{ RGB(0x48,0xD1,0xCC), L"medium turquoise" },
		{ RGB(0xC7,0x15,0x85), L"medium violet red" },
		{ RGB(0x66,0xCD,0xAA), L"MediumAquamarine" },
		{ RGB(0x00,0x00,0xCD), L"MediumBlue" },
		{ RGB(0xBA,0x55,0xD3), L"MediumOrchid" },
		{ RGB(0xE0,0x66,0xFF), L"MediumOrchid1" },
		{ RGB(0xD1,0x5F,0xEE), L"MediumOrchid2" },
		{ RGB(0xB4,0x52,0xCD), L"MediumOrchid3" },
		{ RGB(0x7A,0x37,0x8B), L"MediumOrchid4" },
		{ RGB(0x93,0x70,0xDB), L"MediumPurple" },
		{ RGB(0xAB,0x82,0xFF), L"MediumPurple1" },
		{ RGB(0x9F,0x79,0xEE), L"MediumPurple2" },
		{ RGB(0x89,0x68,0xCD), L"MediumPurple3" },
		{ RGB(0x5D,0x47,0x8B), L"MediumPurple4" },
		{ RGB(0x3C,0xB3,0x71), L"MediumSeaGreen" },
		{ RGB(0x7B,0x68,0xEE), L"MediumSlateBlue" },
		{ RGB(0x00,0xFA,0x9A), L"MediumSpringGreen" },
		{ RGB(0x48,0xD1,0xCC), L"MediumTurquoise" },
		{ RGB(0xC7,0x15,0x85), L"MediumVioletRed" },
		{ RGB(0x19,0x19,0x70), L"midnight blue" },
		{ RGB(0x19,0x19,0x70), L"MidnightBlue" },
		{ RGB(0xF5,0xFF,0xFA), L"mint cream" },
		{ RGB(0xF5,0xFF,0xFA), L"MintCream" },
		{ RGB(0xFF,0xE4,0xE1), L"misty rose" },
		{ RGB(0xFF,0xE4,0xE1), L"MistyRose" },
		{ RGB(0xFF,0xE4,0xE1), L"MistyRose1" },
		{ RGB(0xEE,0xD5,0xD2), L"MistyRose2" },
		{ RGB(0xCD,0xB7,0xB5), L"MistyRose3" },
		{ RGB(0x8B,0x7D,0x7B), L"MistyRose4" },
		{ RGB(0xFF,0xE4,0xB5), L"moccasin" },
		{ RGB(0xFF,0xDE,0xAD), L"navajo white" },
		{ RGB(0xFF,0xDE,0xAD), L"NavajoWhite" },
		{ RGB(0xFF,0xDE,0xAD), L"NavajoWhite1" },
		{ RGB(0xEE,0xCF,0xA1), L"NavajoWhite2" },
		{ RGB(0xCD,0xB3,0x8B), L"NavajoWhite3" },
		{ RGB(0x8B,0x79,0x5E), L"NavajoWhite4" },
		{ RGB(0x00,0x00,0x80), L"navy" },
		{ RGB(0x00,0x00,0x80), L"navy blue" },
		{ RGB(0x00,0x00,0x80), L"NavyBlue" },
		{ RGB(0xFD,0xF5,0xE6), L"old lace" },
		{ RGB(0xFD,0xF5,0xE6), L"OldLace" },
		{ RGB(0x6B,0x8E,0x23), L"olive drab" },
		{ RGB(0x6B,0x8E,0x23), L"OliveDrab" },
		{ RGB(0xC0,0xFF,0x3E), L"OliveDrab1" },
		{ RGB(0xB3,0xEE,0x3A), L"OliveDrab2" },
		{ RGB(0x9A,0xCD,0x32), L"OliveDrab3" },
		{ RGB(0x69,0x8B,0x22), L"OliveDrab4" },
		{ RGB(0xFF,0xA5,0x00), L"orange" },
		{ RGB(0xFF,0x45,0x00), L"orange red" },
		{ RGB(0xFF,0xA5,0x00), L"orange1" },
		{ RGB(0xEE,0x9A,0x00), L"orange2" },
		{ RGB(0xCD,0x85,0x00), L"orange3" },
		{ RGB(0x8B,0x5A,0x00), L"orange4" },
		{ RGB(0xFF,0x45,0x00), L"OrangeRed" },
		{ RGB(0xFF,0x45,0x00), L"OrangeRed1" },
		{ RGB(0xEE,0x40,0x00), L"OrangeRed2" },
		{ RGB(0xCD,0x37,0x00), L"OrangeRed3" },
		{ RGB(0x8B,0x25,0x00), L"OrangeRed4" },
		{ RGB(0xDA,0x70,0xD6), L"orchid" },
		{ RGB(0xFF,0x83,0xFA), L"orchid1" },
		{ RGB(0xEE,0x7A,0xE9), L"orchid2" },
		{ RGB(0xCD,0x69,0xC9), L"orchid3" },
		{ RGB(0x8B,0x47,0x89), L"orchid4" },
		{ RGB(0xEE,0xE8,0xAA), L"pale goldenrod" },
		{ RGB(0x98,0xFB,0x98), L"pale green" },
		{ RGB(0xAF,0xEE,0xEE), L"pale turquoise" },
		{ RGB(0xDB,0x70,0x93), L"pale violet red" },
		{ RGB(0xEE,0xE8,0xAA), L"PaleGoldenrod" },
		{ RGB(0x98,0xFB,0x98), L"PaleGreen" },
		{ RGB(0x9A,0xFF,0x9A), L"PaleGreen1" },
		{ RGB(0x90,0xEE,0x90), L"PaleGreen2" },
		{ RGB(0x7C,0xCD,0x7C), L"PaleGreen3" },
		{ RGB(0x54,0x8B,0x54), L"PaleGreen4" },
		{ RGB(0xAF,0xEE,0xEE), L"PaleTurquoise" },
		{ RGB(0xBB,0xFF,0xFF), L"PaleTurquoise1" },
		{ RGB(0xAE,0xEE,0xEE), L"PaleTurquoise2" },
		{ RGB(0x96,0xCD,0xCD), L"PaleTurquoise3" },
		{ RGB(0x66,0x8B,0x8B), L"PaleTurquoise4" },
		{ RGB(0xDB,0x70,0x93), L"PaleVioletRed" },
		{ RGB(0xFF,0x82,0xAB), L"PaleVioletRed1" },
		{ RGB(0xEE,0x79,0x9F), L"PaleVioletRed2" },
		{ RGB(0xCD,0x68,0x89), L"PaleVioletRed3" },
		{ RGB(0x8B,0x47,0x5D), L"PaleVioletRed4" },
		{ RGB(0xFF,0xEF,0xD5), L"papaya whip" },
		{ RGB(0xFF,0xEF,0xD5), L"PapayaWhip" },
		{ RGB(0xFF,0xDA,0xB9), L"peach puff" },
		{ RGB(0xFF,0xDA,0xB9), L"PeachPuff" },
		{ RGB(0xFF,0xDA,0xB9), L"PeachPuff1" },
		{ RGB(0xEE,0xCB,0xAD), L"PeachPuff2" },
		{ RGB(0xCD,0xAF,0x95), L"PeachPuff3" },
		{ RGB(0x8B,0x77,0x65), L"PeachPuff4" },
		{ RGB(0xCD,0x85,0x3F), L"peru" },
		{ RGB(0xFF,0xC0,0xCB), L"pink" },
		{ RGB(0xFF,0xB5,0xC5), L"pink1" },
		{ RGB(0xEE,0xA9,0xB8), L"pink2" },
		{ RGB(0xCD,0x91,0x9E), L"pink3" },
		{ RGB(0x8B,0x63,0x6C), L"pink4" },
		{ RGB(0xDD,0xA0,0xDD), L"plum" },
		{ RGB(0xFF,0xBB,0xFF), L"plum1" },
		{ RGB(0xEE,0xAE,0xEE), L"plum2" },
		{ RGB(0xCD,0x96,0xCD), L"plum3" },
		{ RGB(0x8B,0x66,0x8B), L"plum4" },
		{ RGB(0xB0,0xE0,0xE6), L"powder blue" },
		{ RGB(0xB0,0xE0,0xE6), L"PowderBlue" },
		{ RGB(0xA0,0x20,0xF0), L"purple" },
		{ RGB(0x9B,0x30,0xFF), L"purple1" },
		{ RGB(0x91,0x2C,0xEE), L"purple2" },
		{ RGB(0x7D,0x26,0xCD), L"purple3" },
		{ RGB(0x55,0x1A,0x8B), L"purple4" },
		{ RGB(0xFF,0x00,0x00), L"red" },
		{ RGB(0xFF,0x00,0x00), L"red1" },
		{ RGB(0xEE,0x00,0x00), L"red2" },
		{ RGB(0xCD,0x00,0x00), L"red3" },
		{ RGB(0x8B,0x00,0x00), L"red4" },
		{ RGB(0xBC,0x8F,0x8F), L"rosy brown" },
		{ RGB(0xBC,0x8F,0x8F), L"RosyBrown" },
		{ RGB(0xFF,0xC1,0xC1), L"RosyBrown1" },
		{ RGB(0xEE,0xB4,0xB4), L"RosyBrown2" },
		{ RGB(0xCD,0x9B,0x9B), L"RosyBrown3" },
		{ RGB(0x8B,0x69,0x69), L"RosyBrown4" },
		{ RGB(0x41,0x69,0xE1), L"royal blue" },
		{ RGB(0x41,0x69,0xE1), L"RoyalBlue" },
		{ RGB(0x48,0x76,0xFF), L"RoyalBlue1" },
		{ RGB(0x43,0x6E,0xEE), L"RoyalBlue2" },
		{ RGB(0x3A,0x5F,0xCD), L"RoyalBlue3" },
		{ RGB(0x27,0x40,0x8B), L"RoyalBlue4" },
		{ RGB(0x8B,0x45,0x13), L"saddle brown" },
		{ RGB(0x8B,0x45,0x13), L"SaddleBrown" },
		{ RGB(0xFA,0x80,0x72), L"salmon" },
		{ RGB(0xFF,0x8C,0x69), L"salmon1" },
		{ RGB(0xEE,0x82,0x62), L"salmon2" },
		{ RGB(0xCD,0x70,0x54), L"salmon3" },
		{ RGB(0x8B,0x4C,0x39), L"salmon4" },
		{ RGB(0xF4,0xA4,0x60), L"sandy brown" },
		{ RGB(0xF4,0xA4,0x60), L"SandyBrown" },
		{ RGB(0x2E,0x8B,0x57), L"sea green" },
		{ RGB(0x2E,0x8B,0x57), L"SeaGreen" },
		{ RGB(0x54,0xFF,0x9F), L"SeaGreen1" },
		{ RGB(0x4E,0xEE,0x94), L"SeaGreen2" },
		{ RGB(0x43,0xCD,0x80), L"SeaGreen3" },
		{ RGB(0x2E,0x8B,0x57), L"SeaGreen4" },
		{ RGB(0xFF,0xF5,0xEE), L"seashell" },
		{ RGB(0xFF,0xF5,0xEE), L"seashell1" },
		{ RGB(0xEE,0xE5,0xDE), L"seashell2" },
		{ RGB(0xCD,0xC5,0xBF), L"seashell3" },
		{ RGB(0x8B,0x86,0x82), L"seashell4" },
		{ RGB(0xA0,0x52,0x2D), L"sienna" },
		{ RGB(0xFF,0x82,0x47), L"sienna1" },
		{ RGB(0xEE,0x79,0x42), L"sienna2" },
		{ RGB(0xCD,0x68,0x39), L"sienna3" },
		{ RGB(0x8B,0x47,0x26), L"sienna4" },
		{ RGB(0x87,0xCE,0xEB), L"sky blue" },
		{ RGB(0x87,0xCE,0xEB), L"SkyBlue" },
		{ RGB(0x87,0xCE,0xFF), L"SkyBlue1" },
		{ RGB(0x7E,0xC0,0xEE), L"SkyBlue2" },
		{ RGB(0x6C,0xA6,0xCD), L"SkyBlue3" },
		{ RGB(0x4A,0x70,0x8B), L"SkyBlue4" },
		{ RGB(0x6A,0x5A,0xCD), L"slate blue" },
		{ RGB(0x70,0x80,0x90), L"slate gray" },
		{ RGB(0x70,0x80,0x90), L"slate grey" },
		{ RGB(0x6A,0x5A,0xCD), L"SlateBlue" },
		{ RGB(0x83,0x6F,0xFF), L"SlateBlue1" },
		{ RGB(0x7A,0x67,0xEE), L"SlateBlue2" },
		{ RGB(0x69,0x59,0xCD), L"SlateBlue3" },
		{ RGB(0x47,0x3C,0x8B), L"SlateBlue4" },
		{ RGB(0x70,0x80,0x90), L"SlateGray" },
		{ RGB(0xC6,0xE2,0xFF), L"SlateGray1" },
		{ RGB(0xB9,0xD3,0xEE), L"SlateGray2" },
		{ RGB(0x9F,0xB6,0xCD), L"SlateGray3" },
		{ RGB(0x6C,0x7B,0x8B), L"SlateGray4" },
		{ RGB(0x70,0x80,0x90), L"SlateGrey" },
		{ RGB(0xFF,0xFA,0xFA), L"snow" },
		{ RGB(0xFF,0xFA,0xFA), L"snow1" },
		{ RGB(0xEE,0xE9,0xE9), L"snow2" },
		{ RGB(0xCD,0xC9,0xC9), L"snow3" },
		{ RGB(0x8B,0x89,0x89), L"snow4" },
		{ RGB(0x00,0xFF,0x7F), L"spring green" },
		{ RGB(0x00,0xFF,0x7F), L"SpringGreen" },
		{ RGB(0x00,0xFF,0x7F), L"SpringGreen1" },
		{ RGB(0x00,0xEE,0x76), L"SpringGreen2" },
		{ RGB(0x00,0xCD,0x66), L"SpringGreen3" },
		{ RGB(0x00,0x8B,0x45), L"SpringGreen4" },
		{ RGB(0x46,0x82,0xB4), L"steel blue" },
		{ RGB(0x46,0x82,0xB4), L"SteelBlue" },
		{ RGB(0x63,0xB8,0xFF), L"SteelBlue1" },
		{ RGB(0x5C,0xAC,0xEE), L"SteelBlue2" },
		{ RGB(0x4F,0x94,0xCD), L"SteelBlue3" },
		{ RGB(0x36,0x64,0x8B), L"SteelBlue4" },
		{ RGB(0xD2,0xB4,0x8C), L"tan" },
		{ RGB(0xFF,0xA5,0x4F), L"tan1" },
		{ RGB(0xEE,0x9A,0x49), L"tan2" },
		{ RGB(0xCD,0x85,0x3F), L"tan3" },
		{ RGB(0x8B,0x5A,0x2B), L"tan4" },
		{ RGB(0xD8,0xBF,0xD8), L"thistle" },
		{ RGB(0xFF,0xE1,0xFF), L"thistle1" },
		{ RGB(0xEE,0xD2,0xEE), L"thistle2" },
		{ RGB(0xCD,0xB5,0xCD), L"thistle3" },
		{ RGB(0x8B,0x7B,0x8B), L"thistle4" },
		{ RGB(0xFF,0x63,0x47), L"tomato" },
		{ RGB(0xFF,0x63,0x47), L"tomato1" },
		{ RGB(0xEE,0x5C,0x42), L"tomato2" },
		{ RGB(0xCD,0x4F,0x39), L"tomato3" },
		{ RGB(0x8B,0x36,0x26), L"tomato4" },
		{ RGB(0x40,0xE0,0xD0), L"turquoise" },
		{ RGB(0x00,0xF5,0xFF), L"turquoise1" },
		{ RGB(0x00,0xE5,0xEE), L"turquoise2" },
		{ RGB(0x00,0xC5,0xCD), L"turquoise3" },
		{ RGB(0x00,0x86,0x8B), L"turquoise4" },
		{ RGB(0xEE,0x82,0xEE), L"violet" },
		{ RGB(0xD0,0x20,0x90), L"violet red" },
		{ RGB(0xD0,0x20,0x90), L"VioletRed" },
		{ RGB(0xFF,0x3E,0x96), L"VioletRed1" },
		{ RGB(0xEE,0x3A,0x8C), L"VioletRed2" },
		{ RGB(0xCD,0x32,0x78), L"VioletRed3" },
		{ RGB(0x8B,0x22,0x52), L"VioletRed4" },
		{ RGB(0xF5,0xDE,0xB3), L"wheat" },
		{ RGB(0xFF,0xE7,0xBA), L"wheat1" },
		{ RGB(0xEE,0xD8,0xAE), L"wheat2" },
		{ RGB(0xCD,0xBA,0x96), L"wheat3" },
		{ RGB(0x8B,0x7E,0x66), L"wheat4" },
		{ RGB(0xFF,0xFF,0xFF), L"white" },
		{ RGB(0xF5,0xF5,0xF5), L"white smoke" },
		{ RGB(0xF5,0xF5,0xF5), L"WhiteSmoke" },
		{ RGB(0xFF,0xFF,0x00), L"yellow" },
		{ RGB(0x9A,0xCD,0x32), L"yellow green" },
		{ RGB(0xFF,0xFF,0x00), L"yellow1" },
		{ RGB(0xEE,0xEE,0x00), L"yellow2" },
		{ RGB(0xCD,0xCD,0x00), L"yellow3" },
		{ RGB(0x8B,0x8B,0x00), L"yellow4" },
		{ RGB(0x9A,0xCD,0x32), L"YellowGreen" },
	};

	if(*str == L'#') {
		wchar_t	format[256];
		int	span = (int)(lstrlen(str)-1) / 3;
		int	r, g, b;
		swprintf_s(format, sizeof(format) / sizeof(format[0]), L"%%%dx%%%dx%%%dx", span, span, span);
		if(swscanf_s(str+1, format, &r, &g, &b) == 3) {
			if(span < 2) {
				r <<= 4;
				g <<= 4;
				b <<= 4;
			}
			else if(span > 2) {
				r >>= 4 * (span-2);
				g >>= 4 * (span-2);
				b >>= 4 * (span-2);
			}
			if(r < 1 && g < 1 && b < 1) b++;
			ret = RGB(r,g,b);
			return(true);
		}
	}
	else {
		unsigned int	i;
		for(i = 0 ; i < sizeof(colors) / sizeof(colors[0]) ; i++) {
			if(!_wcsicmp(colors[i].name, str)) {
				ret = colors[i].color;
				return(true);
			}
		}
	}

	fwprintf(stderr, L"ERROR: invalid color. \"%s\"\n", str);
	fflush(stderr);
	return(false);
}

static void extract(wchar_t *str, std::wstring& app, std::wstring& name, std::wstring& value)
{
	wchar_t	*c1, *c2, *c3, *c4;
	app.erase();
	name.erase();
	value.erase();
	c1 = wcschr(str, L'*');
	if(!c1) return;
	c2 = wcschr(c1, L':');
	if(!c2) return;
	*c1++ = 0;
	*c2++ = 0;
	for(c3 = c2-2 ; c3 > c1 && *c3 <= ' ' ; c3--);
	if(*++c3 <= L' ') *c3 = 0;
	app = str;
	name = c1;
	c4 = c2 + lstrlen(c2)-1;
	for(        ; c2 < c4 && *c2<=L' ' && *c2>0 ; c2++);
	for(c3 = c4 ; c3 > c2 && *c3<=L' ' && *c2>0 ; c3--);
	if(*++c3 <= ' ' && *c3 > 0) *c3 = 0;
	value = c2;
}

static bool lookupBoolean(const wchar_t *value)
{
	if(!_wcsicmp(value, L"true") ||
	   !_wcsicmp(value, L"yes") ||
	   !_wcsicmp(value, L"on") ||
	   !_wcsicmp(value, L"1"))
		return(true);
	return(false);
}

static void usage_fmtL(const wchar_t *name, const wchar_t *type)
{
	if(!name) return;
	size_t	i;
	fwprintf(stdout, L"  %s:", name);
	i = 3 + lstrlen(name);
	for( ; i < 23 ; fputc(L' ', stdout), i++);
	fwprintf(stdout, L"%s\n", type ? type : L"");
}

static void usage_fmtS(const wchar_t *name, const wchar_t *type, const wchar_t *desc)
{
	if(!name) return;
	size_t	i;
	if(type && !lstrcmp(type, L"boolean")) {
		fwprintf(stdout, L"  -/+%s", name);
		i = 5 + lstrlen(name);
	}
	else if(type) {
		fwprintf(stdout, L"  -%s <%s>", name, type);
		i = 6 + lstrlen(name) + lstrlen(type);
	}
	else {
		fwprintf(stdout, L"  -%s", name);
		i = 3 + lstrlen(name);
	}
	for( ; i < 22 ; fputc(L' ', stdout), i++);
	fwprintf(stdout, L" : %s\n", desc ? desc : L"");
}


/*****************************************************************************/


void	ckOpt::cmdsMake(int argc, wchar_t *argv[])
{
	m_cmd.erase();
	wchar_t *chk;
	for(int i = 0 ; i < argc ; i++) {
		chk = argv[i];
		while(!wcschr(L" &()[]{}^=;!'+,`~", *chk)) chk++;
		if(*chk) {
			m_cmd += L"\"";
			m_cmd += argv[i];
			m_cmd += L"\" ";
		}
		else {
			m_cmd += argv[i];
			m_cmd += L" ";
		}
	}
}

void	ckOpt::geometry(const wchar_t *str)
{
	const wchar_t	*c = str;
	int	w = 0;
	int	h = 0;
	int	x = 0;
	int	y = 0;
	bool	minusX = false;
	bool	minusY = false;

	if(!c || *c == 0)
		return;
	for( ; *c != 0 && L'0' <= *c && *c <= L'9' ; c++)
		w = w * 10 + (*c - L'0');
	if(*c == L'x') {
		for(c++ ; *c != 0 && L'0' <= *c && *c <= L'9' ; c++)
			h = h * 10 + (*c - L'0');
	}
	if(*c != 0) {
		if(*c == L'-') { minusX = true; c++; }
		else if(*c == L'+') { c++; }
		for( ; *c != 0 && L'0' <= *c && *c <= L'9' ; c++)
			x = x * 10 + (*c - L'0');
		if(minusX) x = -x-1;

		if(*c == L'-') { minusY = true; c++; }
		else if(*c == L'+') { c++; }
		for( ; *c != 0 && L'0' <= *c && *c <= L'9' ; c++)
			y = y * 10 + (*c - L'0');
		if(minusY) y = -y-1;

		m_isWinPos = true;
		m_winPosX = x;
		m_winPosY = y;
	}
	m_winCharW = (w>0) ? w : 1;
	m_winCharH = (h>0) ? h : 1;
}

/*****************************************************************************/

ckOpt::ckOpt()
{
	m_isWinPos = false;
	m_winPosX = 0;
	m_winPosY = 0;
	m_winCharW = 80;
	m_winCharH = 24;
	m_isIconic = false;
	m_fontSize = 14;
	m_font= L"MS Gothic";
	m_colors[0]  = RGB(0x0c, 0x0c, 0x0c);
	m_colors[1]  = RGB(0x00, 0x37, 0xda);
	m_colors[2]  = RGB(0x13, 0xa1, 0x0e);
	m_colors[3]  = RGB(0x3a, 0x96, 0xdd);
	m_colors[4]  = RGB(0xc5, 0x0f, 0x1f);
	m_colors[5]  = RGB(0x88, 0x17, 0x98);
	m_colors[6]  = RGB(0xc1, 0x9c, 0x00);
	m_colors[7]  = RGB(0xcc, 0xcc, 0xcc);
	m_colors[8]  = RGB(0x76, 0x76, 0x76);
	m_colors[9]  = RGB(0x3b, 0x78, 0xFF);
	m_colors[10] = RGB(0x16, 0xc6, 0x0c);
	m_colors[11] = RGB(0x61, 0xd6, 0xd6);
	m_colors[12] = RGB(0xe7, 0x48, 0x56);
	m_colors[13] = RGB(0xb4, 0x00, 0x9e);
	m_colors[14] = RGB(0xf9, 0xf1, 0xa5);
	m_colors[15] = RGB(0xf2, 0xf2, 0xf2);
	m_colorFg    = RGB(0xC0, 0xC0, 0xC0); // cursor fg
	m_colorBg    = RGB(0x00, 0x00, 0x01); // cursor bg
	m_colorCursor = RGB(0xC0, 0xC0, 0x80);
	m_colorCursorIme = RGB(0xC0, 0x00, 0x00);
	m_alwaysTray = false;
	m_minimizeToTray = false;
	m_scrollHide = false;
	m_scrollRight = true;
	m_saveLines = 500;
	m_borderSize = 1;
	m_lineSpace = 0;
	m_transp = 255;
	m_isTranspColor = false;
	m_transpColor = 0;
	m_isTopMost = false;
	m_config_file[0] = L'\0';
	m_bgBmpPos = 0;
	m_isCurBlink = false;
	m_codePage = GetConsoleCP();
	m_isNoAutoClose = false;
}

ckOpt::~ckOpt()
{
}

#define _CHK_L(longName)  (longName!=nullptr && !lstrcmp(name, longName))
#define _CHK_S(shortName) (!rsrc && shortName!=nullptr && !lstrcmp(name, shortName))

#define CHK_MISC(longName, shortName, func) \
	if(_CHK_L(longName) || _CHK_S(shortName)) { \
		if(!value) return(0); \
		func; \
		return(2); \
	}
#define CHK_BOOL(longName, shortName, var) \
	if(_CHK_L(longName)) { \
		if(!value) return(0); \
		var = lookupBoolean(value); \
		return(2); \
	} \
	if(_CHK_S(shortName)) { \
		var = flagSW; \
		return(1); \
	}

int	ckOpt::setOption(const wchar_t *name, const wchar_t *value, bool rsrc)
{
	bool	flagSW = true;

	if(!rsrc) {
		if(*name == L'-')
			;
		else if(*name == L'+')
			flagSW = false;
		else
			return(0);
		for( ; *name==L'-' || *name==L'+' ; name++);
	}

	CHK_MISC(L"foreground",		L"fg",		lookupColor(value, m_colorFg));
	CHK_MISC(L"background",		L"bg",		lookupColor(value, m_colorBg));
	CHK_MISC(L"cursorColor",	L"cr",		lookupColor(value, m_colorCursor));
	CHK_MISC(L"cursorImeColor",	L"cri",		lookupColor(value, m_colorCursorIme));
	CHK_MISC(L"backgroundBitmap",	L"bitmap",	m_bgBmp = value);
	CHK_MISC(L"icon",		nullptr,	m_icon = value);
	CHK_BOOL(L"alwaysTray",		L"tray",	m_alwaysTray);
	CHK_BOOL(L"minimizeToTray",	L"mintray",	m_minimizeToTray);
	CHK_MISC(L"geometry",		L"g",		geometry(value));
	CHK_BOOL(nullptr, 		L"iconic",	m_isIconic);
	CHK_MISC(L"font",		L"fn",		m_font = value);
	CHK_MISC(L"fontSize",		L"fs",		m_fontSize = _wtoi(value));
	CHK_BOOL(L"scrollHide",		L"sh",		m_scrollHide);
	CHK_BOOL(L"scrollRight",	L"sr",		m_scrollRight);
	CHK_MISC(L"saveLines",		L"sl",		m_saveLines = _wtoi(value));
	CHK_MISC(L"internalBorder",	L"b",		m_borderSize = _wtoi(value));
	CHK_MISC(L"lineSpace",		L"lsp",		m_lineSpace = _wtoi(value));
	CHK_MISC(L"transp",		L"tr",		m_transp = _wtoi(value));
	CHK_MISC(L"transpColor",	L"trc",		m_isTranspColor = lookupColor(value,m_transpColor));
	CHK_BOOL(L"topmost",		L"top",		m_isTopMost);
	CHK_MISC(L"chdir",		L"cd",		m_curDir = value);
	CHK_MISC(L"exec",		L"x",		m_cmd = value);
	CHK_MISC(L"title",		L"tl",		m_title = value);
	CHK_MISC(L"config",		L"c",		setFile(value);loadXdefaults() );
	CHK_MISC(L"backgroundBitmapPos",	L"bitmappos",	m_bgBmpPos = _wtoi(value));
	CHK_BOOL(L"cursorBlink",		L"crb",		m_isCurBlink);
	CHK_MISC(L"codePage",	L"cp",		m_codePage = _wtoi(value));
	CHK_BOOL(L"noAutoClose",	L"nac",		m_isNoAutoClose);


	unsigned int i;
	if(swscanf_s(name, L"color%u", &i)==1 && 0<=i && i<=15) {
		if(!value) return(0);
		lookupColor(value, m_colors[i]);
		return(2);
	}
	return(0);
}

static void usage(bool isLong)
{
	static const wchar_t* str[] = {
	L"foreground",		L"fg",		L"color",	L"foreground color",
	L"background",		L"bg",		L"color",	L"background color",
	L"cursorColor",		L"cr",		L"color",	L"cursor color",
	L"cursorImeColor",	L"cri",		L"color",	L"cursor color IME-on",
	L"color0",		nullptr,		L"color",	L"",
	L"color1",		nullptr,		L"color",	L"",
	L"color2",		nullptr,		L"color",	L"",
	L"color3",		nullptr,		L"color",	L"",
	L"color4",		nullptr,		L"color",	L"",
	L"color5",		nullptr,		L"color",	L"",
	L"color6",		nullptr,		L"color",	L"",
	L"color7",		nullptr,		L"color",	L"",
	L"color8",		nullptr,		L"color",	L"",
	L"color9",		nullptr,		L"color",	L"",
	L"color10",		nullptr,		L"color",	L"",
	L"color11",		nullptr,		L"color",	L"",
	L"color12",		nullptr,		L"color",	L"",
	L"color13",		nullptr,		L"color",	L"",
	L"color14",		nullptr,		L"color",	L"",
	L"color15",		nullptr,		L"color",	L"",
	L"backgroundBitmap",	L"bitmap",	L"string",	L"background bmp file",
	L"icon",			nullptr,		L"string",	L"icon file",
	L"alwaysTray", 		L"tray",		L"boolean",	L"always show tray icon",
	L"minimizeToTray", 	L"mintray",	L"boolean",	L"minimize to task tray",
	L"geometry",		L"g",		L"string",	L"window layout. ( ex. 80x24+0+0 )",
	nullptr, 			L"iconic",	L"boolean",	L"start iconic",
	L"font",			L"fn",		L"string",	L"text font name",
	L"fontSize",		L"fs",		L"number",	L"text font size",
	L"scrollHide",		L"sh",		L"boolean",	L"turn on/off scrollbar hide",
	L"scrollRight",		L"sr",		L"boolean",	L"turn on/off scrollbar right",
	L"saveLines",		L"sl",		L"number",	L"save lines",
	L"internalBorder",	L"b",		L"number",	L"internal border in pixels",
	L"lineSpace",		L"lsp",		L"number",	L"number of extra pixels between rows",
	L"transp",		L"tr",		L"number",	L"alpha 0 ~ 255",
	L"transpColor",		L"trc",		L"color",	L"color key",
	L"topmost",		L"top",		L"boolean",	L"always on top",
	L"chdir",		L"cd",		L"string",	L"set current dir",
	L"exec",			L"x",		L"string",	L"exec shell",
	L"title",		L"tl",		L"string",	L"window title",
	L"config",		L"c",		L"string",	L"configration file",
	L"backgroundBitmapPos",	L"bitmappos",	L"number",	L"background bmp position. ( 0:tile 1:left-top 2:right-top 3:left-bottom 4:right-bottom 5:stretch-h 6:stretch-v 7:stretch-fill )",
	L"cursorBlink",		L"crb",		L"boolean",	L"cursor blink",
	L"codePage",		L"cp",		L"number",	L"code page",
	};
	unsigned int	i;

	fwprintf(stdout, L"%s",
		L"ckw version " VERSION_STRING L" , build " BUILDDATE_STRING L"\n"
		COPYRIGHT_STRING L"\n"
		L"\n"
		L"Usage: ckw [options] [-c configration file] [-e command args]\n"
		L"\n");

	if(isLong) {
		fwprintf(stdout, L"%s", L"where resources (long-options) include:\n");
		for(i = 0 ; i < sizeof(str)/sizeof(str[0]) ; i+=4)
			usage_fmtL(str[i+0], str[i+2]);
		fwprintf(stdout, L"\n%s\n", L"  -help to list options\n");
	}
	else {
		fwprintf(stdout, L"%s", L"where options include:\n");
		for(i = 0 ; i < sizeof(str)/sizeof(str[0]) ; i+=4)
			usage_fmtS(str[i+1], str[i+2], str[i+3]);
		fwprintf(stdout, L"\n%s\n", L"  --help to list long-options\n");
	}
}

void	ckOpt::_loadXdefaults(const wchar_t *path)
{
	wchar_t	buf[512] = { L'\0' };
	FILE	*fp;
	std::wstring app, name, value;

	_wfopen_s(&fp, path, L"r,ccs=UTF-8");
	if(!fp) return;

	do {
		fgetws(buf, _countof(buf)-2, fp);
		if(!buf[0] || buf[0] == L'!')
			continue;

		extract(buf, app, name, value);

		if(name.size() < 1 || value.size() < 1)
			continue;
		if(app.size() > 0 && _wcsicmp(app.c_str(), L"Ckw"))
			continue;

		setOption(name.c_str(), value.c_str(), true);
	} while(!feof(fp));
	fclose(fp);
}

void	ckOpt::setFile(const wchar_t *path /*=nullptr*/)
{
    if(path)
    {
        wcscpy_s(m_config_file, path);
    } else
    {
        m_config_file[0] = L'\0';
    }
}

static bool getconfigfile(const wchar_t* env, wchar_t *cfgfile, wchar_t *path, int size)
{
	if(GetEnvironmentVariable(env, path, size)) {
		swprintf_s(path, size, L"%s\\%s", path, cfgfile);
		if(PathFileExists(path) && !PathIsDirectory(path)) {
			return true;
		}
	}
	return false;
}

void ckOpt::loadXdefaults()
{
  wchar_t path[MAX_PATH+1];

  if(m_config_file[0] == L'\0')
  {
    wchar_t cfgfile[MAX_PATH] = L"_";

    if (0 != GetModuleFileName(nullptr, path, MAX_PATH)) {
		wchar_t szDrive[MAX_PATH];
		wchar_t szDir[MAX_PATH];
		wchar_t szFile[MAX_PATH];
		wchar_t szBuf[MAX_PATH];
		_wsplitpath_s(path, szDrive, szDir, szFile, szBuf);
		wcscat_s(cfgfile, szFile);

		// directory execute exists
		_wmakepath_s(path, MAX_PATH, szDrive, szDir, szFile, L".cfg");
		_loadXdefaults(path);	// ckw.cfg
		_wmakepath_s(path, MAX_PATH, szDrive, szDir, cfgfile, nullptr);
		_loadXdefaults(path);	// _ckw

		// HOME or USERPROFILE
		path[0] = L'\0';
		if (!getconfigfile(L"HOME", cfgfile, path, MAX_PATH)) {
			if (!getconfigfile(L"USERPROFILE", cfgfile, path, MAX_PATH)) {
				cfgfile[0] = L'.';	// .ckw
				if (!getconfigfile(L"HOME", cfgfile, path, MAX_PATH)) {
					getconfigfile(L"USERPROFILE", cfgfile, path, MAX_PATH);
				}
		  }
		}
		if (path[0] != L'\0') _loadXdefaults(path);
    }
  }
  else
  {
    path[0] = L'\0';
    wcscpy_s(path, m_config_file);
    _loadXdefaults(path);
  }
}

bool	ckOpt::set(int argc, wchar_t *argv[])
{
	int	skip;
	int	i = 1;

	while(i < argc) {
		if(lstrcmp(L"-e", argv[i]) == 0) {
			if(++i >= argc) {
				usage(false);
				return(false);
			}
			cmdsMake(argc-i, argv+i);
			return(true);
		}
		if(lstrcmp(L"-help", argv[i]) == 0) {
			usage(false);
			return(false);
		}
		if(lstrcmp(L"--help", argv[i]) == 0) {
			usage(true);
			return(false);
		}

		skip = setOption(argv[i], (i+1<argc) ? argv[i+1] : nullptr, false);
		if(skip < 1) {
			usage(false);
			return(false);
		}
		i += skip;
	}
	return(true);
}

/* EOF */
